//// 
// Syntax of Lambda calclus:

// <var> := a|b|c|...|z
// <exp> :=   <var>          # variable reference
//          | (\<var> <exp>) # function definition
//          | (<exp> <exp>)  # function application












////
// Sample programs: primes, hilbert
/*
git clone https://github.com/melvinzhang/binary-lambda-calculus
cd binary-lambda-calculus
make
make primes.bin
make hilbert
*/











////
// Simplest lambda calculus program
#define Id (\x x)

















////
// Getting to the truth of the matter
#define T (\x \y x)
#define F (\x \y y)
















////
// Making tuples out of closures
// . creating tuples
// . select first/second
#define Cons (\x \y \z (z x y))
/*
((Cons a b) T)
-> (T a b)
-> a
=> T acts as the selector for first

((Cons a b) F)
-> (F a b)
=> F acts as the selector for second
*/





////
// Lists from tuples
#define Nil F
/*
(Cons a (Cons b (Cons c Nil)))
Note that we denote the empty list, Nil, as F. 
This simplifies the expression for list processing later.
*/












////
// On computable numbers
#define OneThird (\self (Cons b0 (Cons b1 (self self))))

/* 
The following program generates the infinite list 0101010101.
If we append 0. to the output, we get the binary expansion of 1/3.
This is also the first example of Turing's 1936 paper.

We make use of self reference via the U combinator to construct a recursive expression.
Another method is via the Y combinator, see Richard P. Gabriel's http://www.dreamsongs.com/Files/WhyOfY.pdf
*/
#define U (\u u u)
//(\input (U OneThird))






////
// List processing
// (L M N)

/*
if L is Nil
  (Nil M N)
  -> N
  => N is the accumulator

if L is (Cons h t)
  ((Cons h t) M N)
  -> (M h t N)
  => M is the list processor, it takes at as arguments the head of the list,
     the tail of the list, and the accumulator
*/




////
// Flip it around

#define Reverse (\self \head \tail \acc (tail (self self) (Cons head acc)))

/* 
The following program reverses the input.
*/

// (\input (input (U Reverse) Nil))










////
// Inception
/*
uni232.lam is the interpreter for the Lambda Calculus writtin in Lambda Calculus

make uni232.blc primes.blc
cat uni232.blc primes.blc | ./uni -b | head -c 70
cat uni232.blc uni232.blc primes.blc | ./uni -b | head -c 70
cat uni232.blc uni232.blc uni232.blc primes.blc | ./uni -b | head -c 70
cat uni232.blc uni232.blc uni232.blc uni232.blc primes.blc | ./uni -b | head -c 70
*/
